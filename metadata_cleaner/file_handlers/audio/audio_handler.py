import os
from typing import Optional, Dict, Any
from metadata_cleaner.logs.logger import logger
from metadata_cleaner.file_handlers.audio.exiftool_audio_handler import extract_metadata as extract_metadata_exiftool, remove_metadata as remove_metadata_exiftool, is_exiftool_available
from metadata_cleaner.file_handlers.audio.mutagen_audio_handler import extract_metadata as extract_metadata_mutagen, remove_metadata as remove_metadata_mutagen
from metadata_cleaner.file_handlers.audio.tinytag_audio_handler import extract_metadata as extract_metadata_tinytag

class AudioHandler:
    """
    Unified handler for audio metadata operations.

    Features:
    - Support for multiple audio formats (MP3, WAV, FLAC, etc.)
    - Automatic tool selection (ExifTool/Mutagen/TinyTag)
    - Metadata extraction and removal
    - File integrity verification
    - Error handling and logging
    """

    def __init__(self, use_exiftool: bool = True):
        """
        Initialize the audio handler.

        Args:
            use_exiftool (bool): Whether to prefer ExifTool over other tools when available.
        """
        self.use_exiftool = use_exiftool and is_exiftool_available()
        self.supported_formats = {'.mp3', '.wav', '.flac', '.ogg', '.aac', '.m4a', '.wma'}

    def validate_file(self, file_path: str) -> bool:
        """Check if the file exists and is valid."""
        if not os.path.exists(file_path):
            logger.error(f"❌ File not found: {file_path}")
            return False
        if not os.path.isfile(file_path):
            logger.error(f"❌ Not a valid file: {file_path}")
            return False
        return True

    def is_supported(self, file_path: str) -> bool:
        """Check if the file format is supported."""
        ext = os.path.splitext(file_path)[1].lower()
        return ext in self.supported_formats

    def extract_metadata(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        Extract metadata from an audio file.

        Args:
            file_path (str): Path to the audio file.

        Returns:
            Optional[Dict[str, Any]]: Extracted metadata or None if extraction fails.
        """
        if not self.validate_file(file_path):
            return None

        if not self.is_supported(file_path):
            logger.error(f"❌ Unsupported audio format: {file_path}")
            return None

        logger.info(f"📂 Extracting metadata from: {file_path}")

        try:
            # Try ExifTool first if available
            if self.use_exiftool:
                metadata = extract_metadata_exiftool(file_path)
                if metadata:
                    logger.info(f"✅ Metadata extracted using ExifTool: {file_path}")
                    return metadata

            # Try Mutagen next
            metadata = extract_metadata_mutagen(file_path)
            if metadata:
                logger.info(f"✅ Metadata extracted using Mutagen: {file_path}")
                return metadata

            # Fall back to TinyTag (read-only)
            metadata = extract_metadata_tinytag(file_path)
            if metadata:
                logger.info(f"✅ Metadata extracted using TinyTag: {file_path}")
                return metadata

            logger.warning(f"⚠️ No metadata found in: {file_path}")
            return {}

        except Exception as e:
            logger.error(f"❌ Error extracting metadata from {file_path}: {e}", exc_info=True)
            return None

    def remove_audio_metadata(self, file_path: str, output_path: Optional[str] = None) -> Optional[str]:
        """
        Removes metadata from an audio file using ExifTool or Mutagen.

        Parameters:
            file_path (str): Path to the audio file.
            output_path (Optional[str]): Destination path for the cleaned file.
                                         If None, a new file name is generated by appending '_cleaned'
                                         before the file extension.

        Returns:
            Optional[str]: The path to the cleaned file if successful; otherwise, None.
        """
        if not self.validate_file(file_path):
            return None

        if not self.is_supported(file_path):
            logger.error(f"❌ Unsupported audio format: {file_path}")
            return None

        # Determine output path if not provided
        if not output_path:
            base, ext = os.path.splitext(file_path)
            output_path = f"{base}_cleaned{ext}"

        logger.info(f"📂 Removing metadata from: {file_path}")

        # Attempt metadata removal using ExifTool first.
        try:
            if self.use_exiftool and remove_metadata_exiftool(file_path):
                if os.path.exists(output_path):
                    logger.info(f"✅ Metadata removed successfully using ExifTool: {output_path}")
                    return output_path
                logger.warning(f"⚠️ ExifTool did not create an output file for {file_path}")
        except Exception as e:
            logger.error(f"❌ ExifTool method encountered an error for {file_path}: {e}", exc_info=True)

        # Fall back to using Mutagen.
        try:
            if remove_metadata_mutagen(file_path):
                if os.path.exists(output_path):
                    logger.info(f"✅ Metadata removed successfully using Mutagen: {output_path}")
                    return output_path
                logger.warning(f"⚠️ Mutagen did not create an output file for {file_path}")
        except Exception as e:
            logger.error(f"❌ Mutagen method encountered an error for {file_path}: {e}", exc_info=True)

        logger.error(f"❌ All audio metadata removal methods failed for {file_path}")
        return None


# Create a default instance
default_handler = AudioHandler()

# Convenience functions using the default handler
def extract_metadata(file_path: str) -> Optional[Dict[str, Any]]:
    """Convenience function to extract metadata using the default handler."""
    return default_handler.extract_metadata(file_path)

def remove_audio_metadata(file_path: str, output_path: Optional[str] = None) -> Optional[str]:
    """Convenience function to remove metadata using the default handler."""
    return default_handler.remove_audio_metadata(file_path, output_path)
