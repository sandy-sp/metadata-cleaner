import subprocess
import os
import shutil
from typing import Optional
from metadata_cleaner.logs.logger import logger


def is_ffmpeg_installed() -> bool:
    """
    Checks if FFmpeg is installed and available in the system path.

    Returns:
        bool: True if FFmpeg is installed, False otherwise.
    """
    return shutil.which("ffmpeg") is not None


def remove_video_metadata(file_path: str, output_path: Optional[str] = None) -> Optional[str]:
    """
    Removes metadata from a video file using FFmpeg.

    This function re-encodes the video using libx264 for video and aac for audio,
    stripping all metadata from the output file.

    Args:
        file_path (str): Path to the input video file.
        output_path (Optional[str]): Destination path for the cleaned video.
                                     If None, a new file name is generated by appending '_cleaned'
                                     before the file extension.

    Returns:
        Optional[str]: The path to the cleaned video if successful; otherwise, None.
    """
    try:
        # Ensure FFmpeg is installed
        if not is_ffmpeg_installed():
            logger.error("❌ FFmpeg is not installed. Please install FFmpeg to process videos.")
            return None

        # Ensure file exists before processing
        if not os.path.exists(file_path):
            logger.error(f"❌ Video file not found: {file_path}")
            return None

        # Determine output path if not provided
        if not output_path:
            base, ext = os.path.splitext(file_path)
            output_path = f"{base}_cleaned{ext}"

        command = [
            "ffmpeg", "-i", file_path, "-map_metadata", "-1",
            "-c:v", "libx264", "-c:a", "aac", "-strict", "experimental",
            "-movflags", "+faststart", output_path, "-y"
        ]

        # Run FFmpeg command and capture output
        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        if result.returncode == 0:
            logger.info(f"✅ Metadata removed successfully: {output_path}")
            return output_path
        else:
            logger.error(f"❌ FFmpeg processing failed for {file_path}: {result.stderr}")
            return None

    except subprocess.CalledProcessError as e:
        logger.error(f"❌ FFmpeg encountered an error while processing {file_path}: {e}", exc_info=True)
        return None

    except Exception as e:
        logger.error(f"❌ Unexpected error processing {file_path}: {e}", exc_info=True)
        return None
